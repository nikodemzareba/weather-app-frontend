{"ast":null,"code":"var _jsxFileName = \"/Users/nikodemzareba/Desktop/weather-app/weather-app-frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [mapCenter, setMapCenter] = useState(null);\n  const [photo, setPhoto] = useState(null);\n  const [popularDestinations, setPopularDestinations] = useState([]);\n  const apiUrl = 'http://localhost:8000/api/weather';\n  const unsplashAccessKey = 'OLEwcp1nhFlVIE7_XyCqDDMYZzJdhdHbITLodkU1sak';\n  const tripAdvisorApiKey = 'D1DFC1E250F743E9A8BDC885CEFB5878';\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get(`${apiUrl}/${selectedLocation}`);\n          setWeatherData(response.data);\n          updateMap(response.data.location.name);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchWeatherData();\n  }, [selectedLocation]);\n  useEffect(() => {\n    const fetchPhoto = async () => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get(`https://api.unsplash.com/photos/random?query=${encodeURIComponent(selectedLocation)}&client_id=${unsplashAccessKey}`);\n          setPhoto(response.data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchPhoto();\n    const interval = setInterval(() => {\n      fetchPhoto();\n    }, 60000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLocation]);\n  useEffect(() => {\n    const fetchPopularDestinations = async () => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get(`https://api.tripadvisor.com/api/partner/2.0/location/${encodeURIComponent(selectedLocation)}/attractions?key=${tripAdvisorApiKey}`);\n          setPopularDestinations(response.data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchPopularDestinations();\n  }, [selectedLocation]);\n  const handleLocationChange = selectedOption => {\n    if (selectedOption) {\n      setSelectedLocation(selectedOption.value);\n    } else {\n      setSelectedLocation(null);\n    }\n  };\n  const updateMap = async location => {\n    try {\n      const response = await axios.get(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`);\n      if (response.data.length > 0) {\n        const {\n          lat,\n          lon\n        } = response.data[0];\n        setMapCenter({\n          lat: parseFloat(lat),\n          lng: parseFloat(lon)\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const cities = [{\n    value: 'london',\n    label: 'London'\n  }, {\n    value: 'manchester',\n    label: 'Manchester'\n  }, {\n    value: 'birmingham',\n    label: 'Birmingham'\n  }, {\n    value: 'glasgow',\n    label: 'Glasgow'\n  }, {\n    value: 'liverpool',\n    label: 'Liverpool'\n  }\n  // Add more cities as needed\n  ];\n\n  const googleMapsApiKey = 'YOUR_GOOGLE_MAPS_API_KEY';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"u8x3Tj8AmZYLQBPOVkKsZglYZZQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","selectedLocation","setSelectedLocation","mapCenter","setMapCenter","photo","setPhoto","popularDestinations","setPopularDestinations","apiUrl","unsplashAccessKey","tripAdvisorApiKey","fetchWeatherData","response","get","data","updateMap","location","name","error","console","fetchPhoto","encodeURIComponent","interval","setInterval","clearInterval","fetchPopularDestinations","handleLocationChange","selectedOption","value","length","lat","lon","parseFloat","lng","cities","label","googleMapsApiKey","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nikodemzareba/Desktop/weather-app/weather-app-frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport { GoogleMap, Marker, LoadScript } from '@react-google-maps/api';\nimport './App.css';\n\ninterface WeatherData {\n  location: {\n    name: string;\n  };\n  current: {\n    temp_c: number;\n    condition: {\n      text: string;\n      icon: string;\n    };\n    humidity: number;\n    pressure_mb: number;\n    last_updated: string;\n    wind_kph: number;\n    uv: number;\n  };\n}\n\ninterface Photo {\n  id: string;\n  urls: {\n    regular: string;\n  };\n}\n\ninterface CityOption {\n  value: string;\n  label: string;\n}\n\ninterface Destination {\n  location_id: string;\n  name: string;\n}\n\nconst App: React.FC = () => {\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n  const [selectedLocation, setSelectedLocation] = useState<string | null>(null);\n  const [mapCenter, setMapCenter] = useState<{ lat: number; lng: number } | null>(null);\n  const [photo, setPhoto] = useState<Photo | null>(null);\n  const [popularDestinations, setPopularDestinations] = useState<Destination[]>([]);\n  const apiUrl: string = 'http://localhost:8000/api/weather';\n  const unsplashAccessKey: string = 'OLEwcp1nhFlVIE7_XyCqDDMYZzJdhdHbITLodkU1sak';\n  const tripAdvisorApiKey: string = 'D1DFC1E250F743E9A8BDC885CEFB5878';\n\n  useEffect(() => {\n    const fetchWeatherData = async (): Promise<void> => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get<WeatherData>(`${apiUrl}/${selectedLocation}`);\n          setWeatherData(response.data);\n          updateMap(response.data.location.name);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchWeatherData();\n  }, [selectedLocation]);\n\n  useEffect(() => {\n    const fetchPhoto = async (): Promise<void> => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get<Photo>(\n            `https://api.unsplash.com/photos/random?query=${encodeURIComponent(\n              selectedLocation\n            )}&client_id=${unsplashAccessKey}`\n          );\n          setPhoto(response.data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchPhoto();\n\n    const interval = setInterval(() => {\n      fetchPhoto();\n    }, 60000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [selectedLocation]);\n\n  useEffect(() => {\n    const fetchPopularDestinations = async (): Promise<void> => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get<Destination[]>(\n            `https://api.tripadvisor.com/api/partner/2.0/location/${encodeURIComponent(\n              selectedLocation\n            )}/attractions?key=${tripAdvisorApiKey}`\n          );\n          setPopularDestinations(response.data);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchPopularDestinations();\n  }, [selectedLocation]);\n\n  const handleLocationChange = (selectedOption: CityOption | null) => {\n    if (selectedOption) {\n      setSelectedLocation(selectedOption.value);\n    } else {\n      setSelectedLocation(null);\n    }\n  };\n\n  const updateMap = async (location: string) => {\n    try {\n      const response = await axios.get(\n        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\n          location\n        )}`\n      );\n      if (response.data.length > 0) {\n        const { lat, lon } = response.data[0];\n        setMapCenter({ lat: parseFloat(lat), lng: parseFloat(lon) });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const cities: CityOption[] = [\n    { value: 'london', label: 'London' },\n    { value: 'manchester', label: 'Manchester' },\n    { value: 'birmingham', label: 'Birmingham' },\n    { value: 'glasgow', label: 'Glasgow' },\n    { value: 'liverpool', label: 'Liverpool' },\n    // Add more cities as needed\n  ];\n\n  const googleMapsApiKey = 'YOUR_GOOGLE_MAPS_API_KEY';\n\n  return (\n    <div className=\"app-container\">\n      {/* Rest of the code remains the same */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}