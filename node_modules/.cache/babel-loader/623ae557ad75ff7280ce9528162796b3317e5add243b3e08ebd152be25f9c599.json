{"ast":null,"code":"var _jsxFileName = \"/Users/nikodemzareba/Desktop/weather-app/weather-app-frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport './App.css';\nimport './google-maps.d.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [map, setMap] = useState(null);\n  const mapContainerRef = React.useRef(null);\n  const apiUrl = 'http://localhost:8000/api/weather';\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get(`${apiUrl}/${selectedLocation}`);\n          setWeatherData(response.data);\n          updateMap(response.data.location.name);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchWeatherData();\n  }, [selectedLocation]);\n  const handleLocationChange = selectedOption => {\n    if (selectedOption) {\n      setSelectedLocation(selectedOption.value);\n    } else {\n      setSelectedLocation(null);\n    }\n  };\n  const updateMap = location => {\n    if (mapContainerRef.current) {\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({\n        address: location\n      }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK) {\n          const mapOptions = {\n            center: results[0].geometry.location,\n            zoom: 12\n          };\n          const mapInstance = new google.maps.Map(mapContainerRef.current, mapOptions);\n          setMap(mapInstance);\n        }\n      });\n    }\n  };\n  const cities = [{\n    value: 'london',\n    label: 'London'\n  }, {\n    value: 'manchester',\n    label: 'Manchester'\n  }, {\n    value: 'birmingham',\n    label: 'Birmingham'\n  }, {\n    value: 'glasgow',\n    label: 'Glasgow'\n  }, {\n    value: 'liverpool',\n    label: 'Liverpool'\n  }\n  // Add more cities as needed\n  ];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Weather App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"location-dropdown\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          placeholder: \"Select a location\",\n          options: cities,\n          onChange: handleLocationChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), weatherData && weatherData.current ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Current Weather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: weatherData.location.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"temperature\",\n            children: [weatherData.current.temp_c, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"condition\",\n            children: weatherData.current.condition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        ref: mapContainerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Powered by React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mCIV6u8NTWG/fg+rylcn7Cenwe4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Select","jsxDEV","_jsxDEV","App","_s","weatherData","setWeatherData","selectedLocation","setSelectedLocation","map","setMap","mapContainerRef","useRef","apiUrl","fetchWeatherData","response","get","data","updateMap","location","name","error","console","handleLocationChange","selectedOption","value","current","geocoder","google","maps","Geocoder","geocode","address","results","status","GeocoderStatus","OK","mapOptions","center","geometry","zoom","mapInstance","Map","cities","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","options","onChange","temp_c","condition","text","ref","_c","$RefreshReg$"],"sources":["/Users/nikodemzareba/Desktop/weather-app/weather-app-frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Select from 'react-select';\nimport './App.css';\nimport './google-maps.d.ts';\n\ninterface WeatherData {\n  location: {\n    name: string;\n  };\n  current: {\n    temp_c: number;\n    condition: {\n      text: string;\n    };\n  };\n}\n\ninterface CityOption {\n  value: string;\n  label: string;\n}\n\nconst App: React.FC = () => {\n  const [weatherData, setWeatherData] = useState<WeatherData | null>(null);\n  const [selectedLocation, setSelectedLocation] = useState<string | null>(null);\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const mapContainerRef = React.useRef<HTMLDivElement>(null);\n  const apiUrl: string = 'http://localhost:8000/api/weather';\n\n  useEffect(() => {\n    const fetchWeatherData = async (): Promise<void> => {\n      try {\n        if (selectedLocation) {\n          const response = await axios.get<WeatherData>(`${apiUrl}/${selectedLocation}`);\n          setWeatherData(response.data);\n          updateMap(response.data.location.name);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchWeatherData();\n  }, [selectedLocation]);\n\n  const handleLocationChange = (selectedOption: CityOption | null) => {\n    if (selectedOption) {\n      setSelectedLocation(selectedOption.value);\n    } else {\n      setSelectedLocation(null);\n    }\n  };\n\n  const updateMap = (location: string) => {\n    if (mapContainerRef.current) {\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ address: location }, (results, status) => {\n        if (status === google.maps.GeocoderStatus.OK) {\n          const mapOptions: google.maps.MapOptions = {\n            center: results[0].geometry.location,\n            zoom: 12,\n          };\n          const mapInstance = new google.maps.Map(mapContainerRef.current, mapOptions);\n          setMap(mapInstance);\n        }\n      });\n    }\n  };\n\n  const cities: CityOption[] = [\n    { value: 'london', label: 'London' },\n    { value: 'manchester', label: 'Manchester' },\n    { value: 'birmingham', label: 'Birmingham' },\n    { value: 'glasgow', label: 'Glasgow' },\n    { value: 'liverpool', label: 'Liverpool' },\n    // Add more cities as needed\n  ];\n\n  return (\n    <div className=\"app-container\">\n      <header className=\"app-header\">\n        <h1>Weather App</h1>\n      </header>\n      <main className=\"app-content\">\n        <div className=\"location-dropdown\">\n          <Select\n            placeholder=\"Select a location\"\n            options={cities}\n            onChange={handleLocationChange}\n          />\n        </div>\n        {weatherData && weatherData.current ? (\n          <div>\n            <h2>Current Weather</h2>\n            <div className=\"weather-card\">\n              <h3>{weatherData.location.name}</h3>\n              <p className=\"temperature\">{weatherData.current.temp_c}Â°C</p>\n              <p className=\"condition\">{weatherData.current.condition.text}</p>\n            </div>\n          </div>\n        ) : (\n          <div>Loading...</div>\n        )}\n        <div className=\"map-container\" ref={mapContainerRef}></div>\n      </main>\n      <footer className=\"app-footer\">\n        <p>Powered by React</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}